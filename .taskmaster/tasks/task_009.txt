# Task ID: 9
# Title: Implement Person Profile View
# Status: pending
# Dependencies: 6, 7
# Priority: medium
# Description: Create person profile pages showing all associated memories in chronological order
# Details:
Develop person profile views with the following features:

1. Person information display
2. Chronological list of associated memories
3. Memory cards similar to timeline view
4. Edit and delete person actions with confirmation
5. Statistics about memory frequency and date ranges

Connect person profile to GraphQL query for retrieving a person with all associated memories. Implement memory filtering and sorting within the person context. Create edit and delete functionality with proper confirmation and impact assessment.

# Test Strategy:
Test person profile with various numbers of associated memories. Verify that memories are displayed in chronological order. Test edit and delete functionality with proper confirmation. Verify that statistics are calculated and displayed correctly.

# Subtasks:
## 1. Create Person Profile Layout with Avatar and Metadata [pending]
### Dependencies: None
### Description: Implement the basic layout for the person profile view, including the person's avatar, name, and relevant metadata.
### Details:
Create a new PersonProfileView component that displays the person's avatar, name, and metadata (e.g., relationship, birthday, contact info). Implement the GraphQL query to fetch person data. Use a responsive layout with appropriate spacing and typography. Include a header section with the person's name and a back button to return to the previous view.

## 2. Implement Chronological Memory List for Person [done]
### Dependencies: None
### Description: Display all memories associated with the person in chronological order, using memory cards similar to the timeline view.
### Details:
Extend the GraphQL query to include all memories associated with the person. Implement a chronological list component that renders memory cards for each memory. Include date headers to group memories by time period. Add sorting controls (newest/oldest first). Reuse the existing memory card component from the timeline view, adapting it as needed for the person context.

## 3. Add Edit Person Functionality [pending]
### Dependencies: None
### Description: Implement the ability to edit a person's information with proper form validation and error handling.
### Details:
Create an EditPersonForm component with fields for all editable person attributes. Implement form validation for required fields and data formats. Add an edit button to the person profile that opens the form in a modal or navigates to an edit view. Implement the GraphQL mutation to update person data. Show appropriate loading states and success/error messages after submission.

## 4. Implement Delete Person Functionality with Confirmation [pending]
### Dependencies: None
### Description: Add the ability to delete a person with proper confirmation dialog and impact assessment.
### Details:
Add a delete button to the person profile. Implement a confirmation dialog that explains the consequences of deletion (e.g., memories will remain but person associations will be removed). Show the number of affected memories in the confirmation. Implement the GraphQL mutation to delete a person. After successful deletion, redirect to the appropriate view (e.g., people list). Handle errors gracefully.

## 5. Create Memory Statistics Section [pending]
### Dependencies: None
### Description: Implement a statistics section showing memory frequency, date ranges, and other relevant metrics for the person.
### Details:
Create a PersonStatistics component that calculates and displays metrics such as: total number of memories, first and last memory dates, memory frequency over time (e.g., memories per year/month), and common co-occurring people. Use appropriate data visualizations (charts, graphs) for frequency data. Implement caching to avoid recalculating statistics on every render. Add a toggle to show/hide detailed statistics.

