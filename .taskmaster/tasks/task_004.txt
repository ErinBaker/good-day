# Task ID: 4
# Title: Create GraphQL API Schema
# Status: done
# Dependencies: 2
# Priority: high
# Description: Define GraphQL schema for memories, people, and their relationships
# Details:
Design and implement a GraphQL schema with the following types and operations:

1. Types:
   - Memory (id, title, date, description, photoUrl, createdAt, updatedAt, people)
   - Person (id, name, relationship, createdAt, updatedAt, memories)
   - MemoryInput (title, date, description, photoUrl, peopleIds)
   - PersonInput (name, relationship)

2. Queries:
   - memories(limit, offset, sortBy): [Memory]
   - memory(id): Memory
   - people(limit, offset, sortBy): [Person]
   - person(id): Person

3. Mutations:
   - createMemory(input: MemoryInput): Memory
   - updateMemory(id: ID!, input: MemoryInput): Memory
   - deleteMemory(id: ID!): Boolean
   - createPerson(input: PersonInput): Person
   - updatePerson(id: ID!, input: PersonInput): Person
   - deletePerson(id: ID!): Boolean
   - tagPersonInMemory(memoryId: ID!, personId: ID!): Memory
   - removePersonFromMemory(memoryId: ID!, personId: ID!): Memory

Implement resolvers for each query and mutation that interact with the database.

# Test Strategy:
Test each GraphQL query and mutation with various inputs. Verify that relationships between memories and people are correctly maintained. Test error handling for invalid inputs and edge cases.

# Subtasks:
## 1. Define GraphQL Schema Types [done]
### Dependencies: None
### Description: Create the core GraphQL schema type definitions for Memory, Person, MemoryInput, and PersonInput.
### Details:
Create a schema.graphql file with type definitions for Memory (id, title, date, description, photoUrl, createdAt, updatedAt, people), Person (id, name, relationship, createdAt, updatedAt, memories), MemoryInput (title, date, description, photoUrl, peopleIds), and PersonInput (name, relationship). Ensure proper relationships between types using ID references.

## 2. Implement Query Type Definitions [done]
### Dependencies: 4.1
### Description: Define the GraphQL Query type with all required query operations.
### Details:
Add Query type to the schema with operations: memories(limit, offset, sortBy): [Memory], memory(id): Memory, people(limit, offset, sortBy): [Person], and person(id): Person. Include appropriate arguments and return types for each query.

## 3. Implement Mutation Type Definitions [done]
### Dependencies: 4.1
### Description: Define the GraphQL Mutation type with all required mutation operations.
### Details:
Add Mutation type to the schema with operations: createMemory, updateMemory, deleteMemory, createPerson, updatePerson, deletePerson, tagPersonInMemory, and removePersonFromMemory. Include appropriate input arguments and return types for each mutation.

## 4. Implement Memory Query Resolvers [done]
### Dependencies: 4.2
### Description: Create resolver functions for Memory-related queries.
### Details:
Implement resolver functions for 'memories' and 'memory' queries. The 'memories' resolver should handle pagination (limit, offset) and sorting (sortBy), while the 'memory' resolver should fetch a single memory by ID. Both should properly populate the 'people' field with related Person objects.

## 5. Implement Person Query Resolvers [done]
### Dependencies: 4.2
### Description: Create resolver functions for Person-related queries.
### Details:
Implement resolver functions for 'people' and 'person' queries. The 'people' resolver should handle pagination (limit, offset) and sorting (sortBy), while the 'person' resolver should fetch a single person by ID. Both should properly populate the 'memories' field with related Memory objects.

## 6. Implement Memory Mutation Resolvers [done]
### Dependencies: 4.3
### Description: Create resolver functions for Memory-related mutations.
### Details:
Implement resolver functions for 'createMemory', 'updateMemory', and 'deleteMemory' mutations. Each resolver should validate input data, interact with the database appropriately, and return the expected results. Handle error cases gracefully.

## 7. Implement Person Mutation Resolvers [done]
### Dependencies: 4.3
### Description: Create resolver functions for Person-related mutations.
### Details:
Implement resolver functions for 'createPerson', 'updatePerson', and 'deletePerson' mutations. Each resolver should validate input data, interact with the database appropriately, and return the expected results. Handle error cases gracefully.

## 8. Implement Relationship Mutation Resolvers [done]
### Dependencies: 4.6, 4.7
### Description: Create resolver functions for mutations that manage relationships between Memories and People.
### Details:
Implement resolver functions for 'tagPersonInMemory' and 'removePersonFromMemory' mutations. These should handle the many-to-many relationship between memories and people, updating the appropriate database records. Include validation to ensure both entities exist before attempting to create or remove relationships.

